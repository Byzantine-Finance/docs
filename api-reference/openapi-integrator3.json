
{
  "openapi": "3.0.3",
  "info": {
    "title": "Byzantine Integrator API",
    "description": "Byzantine REST API for integrators.",
    "license": {
      "name": ""
    },
    "version": "0.2.0"
  },
  "paths": {
    "/api/v1/submit/create-entity": {
      "post": {
        "tags": [
          "User accounts"
        ],
        "summary": "Create entity 123",
        "operationId": "create_entity",
        "parameters": [
          {
            "name": "X-Pubkey",
            "in": "header",
            "description": "Integrator's ECDSA public key (P-256 curve, compressed SEC1 format). Example: 0x038fedef7c12f93bbf342ad8943b7a825a3b41f61c9dc118b2c718efebabbf62fd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Timestamp",
            "in": "header",
            "description": "Unix timestamp in seconds (UTC). Must be within tolerance window (1 minute) to prevent replay attacks. Example: 1760375826",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Signature",
            "in": "header",
            "description": "ECDSA signature (DER-encoded, hex with 0x prefix). Signs the message: {timestamp}{METHOD}{path_and_query}{json_body}. Example: 0x3045022100...",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Byzantine entity creation body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SumsubApplicantData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "integrator_auth": []
          }
        ]
      }
    },
    "/api/v1/submit/create-user": {
      "post": {
        "tags": [
          "User accounts"
        ],
        "summary": "Create user",
        "operationId": "create_user",
        "parameters": [
          {
            "name": "X-Pubkey",
            "in": "header",
            "description": "Integrator's ECDSA public key (P-256 curve, compressed SEC1 format). Example: 0x038fedef7c12f93bbf342ad8943b7a825a3b41f61c9dc118b2c718efebabbf62fd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Timestamp",
            "in": "header",
            "description": "Unix timestamp in seconds (UTC). Must be within tolerance window (1 minute) to prevent replay attacks. Example: 1760375826",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Signature",
            "in": "header",
            "description": "ECDSA signature (DER-encoded, hex with 0x prefix). Signs the message: {timestamp}{METHOD}{path_and_query}{json_body}. Example: 0x3045022100...",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Byzantine user creation body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SumsubApplicantData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "integrator_auth": []
          }
        ]
      }
    },
    "/api/v1/query/get-approve-body": {
      "post": {
        "tags": [
          "Approve vault for deposit"
        ],
        "summary": "Get approval transaction",
        "description": "Get the transaction body to sign, in order to approve a vault.",
        "operationId": "get_approve_body",
        "parameters": [
          {
            "name": "chain_id",
            "in": "query",
            "description": "Chain ID (1 for Ethereum, 8453 for Base)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "Approve request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignTransactionRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid chain ID"
          }
        }
      }
    },
    "/api/v1/submit/approve": {
      "post": {
        "tags": [
          "Approve vault for deposit"
        ],
        "summary": "Approve a vault for user",
        "description": "Submit the transaction that approves a vault to accept USDC from specific user wallet (mandatory step before depositing).",
        "operationId": "approve_vault",
        "parameters": [
          {
            "name": "X-Pubkey",
            "in": "header",
            "description": "Integrator's ECDSA public key (P-256 curve, compressed SEC1 format). Example: 0x038fedef7c12f93bbf342ad8943b7a825a3b41f61c9dc118b2c718efebabbf62fd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Timestamp",
            "in": "header",
            "description": "Unix timestamp in seconds (UTC). Must be within tolerance window (1 minute) to prevent replay attacks. Example: 1760375826",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Signature",
            "in": "header",
            "description": "ECDSA signature (DER-encoded, hex with 0x prefix). Signs the message: {timestamp}{METHOD}{path_and_query}{json_body}. Example: 0x3045022100...",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Stamp",
            "in": "header",
            "description": "WebAuthn User Stamp generated by the client. Example: 0x038fedef7c12f93bbf342ad8943b7a825a3b41f61c9dc118b2c718efebabbf62fd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_id",
            "in": "query",
            "description": "Chain ID (1 for Ethereum, 8453 for Base)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "Approve body signed by the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionReceipt"
                }
              }
            }
          },
          "400": {
            "description": "Invalid chain ID"
          }
        },
        "security": [
          {
            "integrator_and_user_auth": []
          }
        ]
      }
    },
    "/api/v1/query/get-deposit-body": {
      "post": {
        "tags": [
          "Make deposit"
        ],
        "summary": "Get deposit transaction",
        "description": "Get the transaction body to sign, in order to make a deposit.",
        "operationId": "get_deposit_body",
        "parameters": [
          {
            "name": "chain_id",
            "in": "query",
            "description": "Chain ID (1 for Ethereum, 8453 for Base)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "Deposit request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignTransactionRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid chain ID"
          }
        }
      }
    },
    "/api/v1/submit/deposit": {
      "post": {
        "tags": [
          "Make deposit"
        ],
        "summary": "Submit deposit transaction",
        "description": "Submit the transaction that deposits assets into a Byzantine vault.",
        "operationId": "deposit",
        "parameters": [
          {
            "name": "X-Pubkey",
            "in": "header",
            "description": "Integrator's ECDSA public key (P-256 curve, compressed SEC1 format). Example: 0x038fedef7c12f93bbf342ad8943b7a825a3b41f61c9dc118b2c718efebabbf62fd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Timestamp",
            "in": "header",
            "description": "Unix timestamp in seconds (UTC). Must be within tolerance window (1 minute) to prevent replay attacks. Example: 1760375826",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Signature",
            "in": "header",
            "description": "ECDSA signature (DER-encoded, hex with 0x prefix). Signs the message: {timestamp}{METHOD}{path_and_query}{json_body}. Example: 0x3045022100...",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Stamp",
            "in": "header",
            "description": "WebAuthn User Stamp generated by the client. Example: 0x038fedef7c12f93bbf342ad8943b7a825a3b41f61c9dc118b2c718efebabbf62fd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_id",
            "in": "query",
            "description": "Chain ID (1 for Ethereum, 8453 for Base)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "Deposit body signed by the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionReceipt"
                }
              }
            }
          },
          "400": {
            "description": "Invalid chain ID"
          }
        },
        "security": [
          {
            "integrator_and_user_auth": []
          }
        ]
      }
    },
    "/api/v1/vault-v2/apy/{vault_id}": {
      "get": {
        "tags": [
          "Query vault data"
        ],
        "summary": "Get vault APY",
        "description": "Calculate APY for daily, weekly, monthly, and yearly periods with fallback to oldest available data.",
        "operationId": "get_vault_apy",
        "parameters": [
          {
            "name": "vault_id",
            "in": "path",
            "description": "Vault ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Specific period (daily, weekly, monthly, yearly, all)",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "APY data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Vault not found or insufficient data"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vault-v2/deposits/user/{user_id}": {
      "get": {
        "tags": [
          "Query user data"
        ],
        "summary": "Get all deposits by user ID",
        "description": "Returns list of deposits for a specific user.",
        "operationId": "get_deposits_by_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User VaultV2 deposits retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultV2Deposit"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vault-v2/getUserPositions/{address}": {
      "get": {
        "tags": [
          "Query user data"
        ],
        "summary": "Get user positions",
        "description": "Returns comprehensive user positions including balances and transactions for each vault.",
        "operationId": "get_user_positions",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "User address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of transactions per vault",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User positions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultV2UserPositionsResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found or no positions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vault-v2/history/{vault_id}": {
      "get": {
        "tags": [
          "Query vault data"
        ],
        "summary": "Get historical share price data",
        "description": "Returns hourly aggregated share price data for a vault.",
        "operationId": "get_vault_history",
        "parameters": [
          {
            "name": "vault_id",
            "in": "path",
            "description": "Vault ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for history",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for history",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of results (default: 1000)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination (default: 0)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order by timestamp: asc or desc (default: asc)",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Historical data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Vault not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vault-v2/top-vaults": {
      "get": {
        "tags": [
          "Query vault data"
        ],
        "summary": "Get list of Byzantine vaults",
        "description": "Returns a list of all Byzantine vaults from configuration. \"Vaults\" are deposit products, the main entities in the Byzantine protocol.",
        "operationId": "get_top_vaults",
        "responses": {
          "200": {
            "description": "List of top vaults retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopVault"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vault-v2/withdrawals/user/{user_id}": {
      "get": {
        "tags": [
          "Query user data"
        ],
        "summary": "Get all withdrawals by user ID",
        "description": "Returns list of withdrawals for a specific user.",
        "operationId": "get_withdrawals_by_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User VaultV2 withdrawals retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultV2Withdraw"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Query API health"
        ],
        "summary": "Health check endpoint",
        "description": "Returns the health status of the API",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicantInfo": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SumsubAddress"
            },
            "nullable": true
          },
          "companyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyInfo"
              }
            ],
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApplicantType": {
        "type": "string",
        "description": "Type of applicant for Sumsub verification",
        "enum": [
          "individual",
          "company"
        ]
      },
      "ApproveRequestBody": {
        "type": "object",
        "required": [
          "vaultAddr",
          "organizationId"
        ],
        "properties": {
          "organizationId": {
            "type": "string"
          },
          "vaultAddr": {
            "type": "string"
          }
        }
      },
      "ApyQueryParams": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApyResponse": {
        "type": "object",
        "required": [
          "vault_id",
          "latest_share_price",
          "calculated_at"
        ],
        "properties": {
          "calculated_at": {
            "type": "string",
            "format": "date-time"
          },
          "daily_apy": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "daily_period_days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "latest_share_price": {
            "$ref": "#/components/schemas/BigDecimal"
          },
          "monthly_apy": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "monthly_period_days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "vault_id": {
            "type": "string"
          },
          "weekly_apy": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weekly_period_days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "yearly_apy": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "yearly_period_days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "Attestation": {
        "type": "object",
        "required": [
          "credentialId",
          "clientDataJson",
          "attestationObject",
          "transports"
        ],
        "properties": {
          "attestationObject": {
            "type": "string"
          },
          "clientDataJson": {
            "type": "string"
          },
          "credentialId": {
            "type": "string"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthenticatorParam": {
        "type": "object",
        "required": [
          "authenticatorName",
          "challenge",
          "attestation"
        ],
        "properties": {
          "attestation": {
            "$ref": "#/components/schemas/Attestation"
          },
          "authenticatorName": {
            "type": "string"
          },
          "challenge": {
            "type": "string"
          }
        }
      },
      "Beneficiary": {
        "type": "object",
        "properties": {
          "applicantId": {
            "type": "string",
            "nullable": true
          },
          "beneficiaryInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BeneficiaryInfo"
              }
            ],
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "shareSize": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "BeneficiaryInfo": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BigDecimal": {
        "type": "string",
        "description": "A decimal number represented as a string",
        "example": "1000.00"
      },
      "CompanyInfo": {
        "type": "object",
        "properties": {
          "beneficiaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Beneficiary"
            },
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateCompanyInfo": {
        "type": "object",
        "description": "Company information for business verification",
        "required": [
          "companyName",
          "registrationNumber",
          "country",
          "address",
          "incorporatedOn",
          "type"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/SumsubAddress"
          },
          "companyName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "incorporatedOn": {
            "type": "string"
          },
          "registrationNumber": {
            "type": "string"
          },
          "taxId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateEntityRequest": {
        "type": "object",
        "description": "Request body for creating a Byzantine entity",
        "required": [
          "externalEntityId",
          "entityInfo"
        ],
        "properties": {
          "entityInfo": {
            "$ref": "#/components/schemas/CreateCompanyInfo"
          },
          "externalEntityId": {
            "type": "string"
          }
        }
      },
      "CreateUserInfo": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "country",
          "addresses",
          "taxResidenceCountry"
        ],
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SumsubAddress"
            }
          },
          "country": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "taxResidenceCountry": {
            "type": "string"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "description": "Request body for creating a Byzantine user",
        "required": [
          "externalUserId",
          "email",
          "userInfo"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "externalUserId": {
            "type": "string"
          },
          "userInfo": {
            "$ref": "#/components/schemas/CreateUserInfo"
          }
        }
      },
      "Decimal": {
        "type": "string",
        "description": "A high-precision decimal number represented as a string",
        "example": "123.456789"
      },
      "DepositRequestBody": {
        "type": "object",
        "required": [
          "vaultAddr",
          "amount",
          "organizationId"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Decimal"
          },
          "organizationId": {
            "type": "string"
          },
          "vaultAddr": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Resource not found"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "HTTP status code",
            "example": 404,
            "minimum": 0
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Health status",
            "example": "OK"
          }
        }
      },
      "HistoryDataPoint": {
        "type": "object",
        "required": [
          "timestamp",
          "share_price",
          "total_assets",
          "hourly_apy"
        ],
        "properties": {
          "hourly_apy": {
            "type": "number",
            "format": "double"
          },
          "share_price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "total_assets": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "HistoryQueryParams": {
        "type": "object",
        "properties": {
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "order": {
            "type": "string",
            "nullable": true
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "HistoryResponse": {
        "type": "object",
        "required": [
          "vault_id",
          "data",
          "total_count"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoryDataPoint"
            }
          },
          "total_count": {
            "type": "integer",
            "format": "int64"
          },
          "vault_id": {
            "type": "string"
          }
        }
      },
      "NaiveDateTime": {
        "type": "string",
        "format": "date-time",
        "description": "A naive datetime string without timezone",
        "example": "2023-01-01T12:00:00"
      },
      "RootUser": {
        "type": "object",
        "required": [
          "userName"
        ],
        "properties": {
          "authenticators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticatorParam"
            },
            "nullable": true
          },
          "externalUserId": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "SignTransactionParams": {
        "type": "object",
        "required": [
          "signWith",
          "unsignedTransaction",
          "type"
        ],
        "properties": {
          "signWith": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unsignedTransaction": {
            "type": "string"
          }
        }
      },
      "SignTransactionRequest": {
        "type": "object",
        "required": [
          "type",
          "timestampMs",
          "organizationId",
          "parameters"
        ],
        "properties": {
          "organizationId": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/SignTransactionParams"
          },
          "timestampMs": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SubOrg": {
        "type": "object",
        "required": [
          "sub_organization_id",
          "integrator_id",
          "sub_organization_name",
          "wallet_addresses",
          "root_user_ids",
          "created_at",
          "updated_at",
          "root_quorum_threshold",
          "external_user_ids"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "external_user_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "integrator_id": {
            "$ref": "#/components/schemas/Uuid"
          },
          "root_quorum_threshold": {
            "type": "integer",
            "format": "int32"
          },
          "root_user_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "sub_organization_id": {
            "$ref": "#/components/schemas/Uuid"
          },
          "sub_organization_name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "wallet_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            }
          }
        }
      },
      "SumsubAddress": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "town": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SumsubApplicantData": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "externalUserId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicantInfo"
              }
            ],
            "nullable": true
          },
          "requiredIdDocsStatus": {
            "type": "string",
            "nullable": true
          },
          "review": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SumsubApplicantReview"
              }
            ],
            "nullable": true
          },
          "reviewResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SumsubReviewResult"
              }
            ],
            "nullable": true
          },
          "reviewStatus": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicantType"
              }
            ],
            "nullable": true
          }
        }
      },
      "SumsubApplicantReview": {
        "type": "object",
        "properties": {
          "attemptCnt": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attemptId": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "nullable": true
          },
          "levelName": {
            "type": "string",
            "nullable": true
          },
          "reviewDate": {
            "type": "string",
            "nullable": true
          },
          "reviewId": {
            "type": "string",
            "nullable": true
          },
          "reviewResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SumsubReviewResult"
              }
            ],
            "nullable": true
          },
          "reviewStatus": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SumsubReviewResult": {
        "type": "object",
        "required": [
          "reviewAnswer"
        ],
        "properties": {
          "buttonIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "rejectLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "reviewAnswer": {
            "type": "string"
          },
          "reviewRejectType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TopVault": {
        "type": "object",
        "required": [
          "vault_address",
          "chain_id",
          "is_active"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int32"
          },
          "is_active": {
            "type": "boolean"
          },
          "vault_address": {
            "type": "string"
          }
        }
      },
      "TransactionReceipt": {
        "type": "object",
        "description": "Ethereum transaction receipt",
        "properties": {
          "blobGasPrice": {
            "type": "string",
            "nullable": true
          },
          "blobGasUsed": {
            "type": "string",
            "nullable": true
          },
          "blockHash": {
            "type": "string",
            "nullable": true
          },
          "blockNumber": {
            "type": "integer",
            "nullable": true
          },
          "contractAddress": {
            "type": "string",
            "nullable": true
          },
          "effectiveGasPrice": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "gasUsed": {
            "type": "string"
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "transactionHash": {
            "type": "string",
            "example": "0x123..."
          },
          "transactionIndex": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "Uuid": {
        "type": "string",
        "format": "uuid",
        "description": "A UUID string",
        "example": "550e8400-e29b-41d4-a716-446655440000"
      },
      "VaultV2Deposit": {
        "type": "object",
        "required": [
          "assets",
          "block_number",
          "block_timestamp",
          "chain_id",
          "id",
          "log_index",
          "on_behalf",
          "sender",
          "shares",
          "transaction_hash",
          "user_id",
          "vault_id"
        ],
        "properties": {
          "assets": {
            "type": "string",
            "description": "Amount of assets deposited",
            "example": "500.25"
          },
          "block_number": {
            "type": "string",
            "description": "Block number when deposit occurred",
            "example": "18500000"
          },
          "block_timestamp": {
            "type": "string",
            "description": "Block timestamp when deposit occurred",
            "example": "1672531200"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "Chain ID",
            "example": 1
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the deposit",
            "example": "deposit_123"
          },
          "log_index": {
            "type": "integer",
            "format": "int32",
            "description": "Log index of the deposit event",
            "example": 42
          },
          "on_behalf": {
            "type": "string",
            "description": "Address on behalf of whom the deposit was made",
            "example": "0x1234567890abcdef"
          },
          "sender": {
            "type": "string",
            "description": "Address of the deposit sender",
            "example": "0xabcdef1234567890"
          },
          "shares": {
            "type": "string",
            "description": "Amount of shares received for the deposit",
            "example": "498.75"
          },
          "transaction_hash": {
            "type": "string",
            "description": "Transaction hash of the deposit",
            "example": "0x9876543210fedcba"
          },
          "user_id": {
            "type": "string",
            "description": "User ID associated with this deposit",
            "example": "user_456"
          },
          "vault_id": {
            "type": "string",
            "description": "Vault ID associated with this deposit",
            "example": "vault_789"
          }
        },
        "example": {
          "assets": "500.25",
          "block_number": "18500000",
          "block_timestamp": "1672531200",
          "chain_id": 1,
          "id": "deposit_123",
          "log_index": 42,
          "on_behalf": "0x1234567890abcdef",
          "sender": "0xabcdef1234567890",
          "shares": "498.75",
          "transaction_hash": "0x9876543210fedcba",
          "user_id": "user_456",
          "vault_id": "vault_789"
        }
      },
      "VaultV2DepositQueryParams": {
        "type": "object",
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by chain ID",
            "example": 1,
            "nullable": true
          },
          "from_block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Limit number of results",
            "example": 100,
            "nullable": true
          },
          "max_assets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "min_assets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "on_behalf": {
            "type": "string",
            "description": "Filter by on_behalf address",
            "example": "0x1234567890abcdef",
            "nullable": true
          },
          "sender": {
            "type": "string",
            "description": "Filter by sender address",
            "example": "0xabcdef1234567890",
            "nullable": true
          },
          "to_block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "description": "Filter by user ID",
            "example": "user_456",
            "nullable": true
          },
          "vault_id": {
            "type": "string",
            "description": "Filter by vault ID",
            "example": "vault_789",
            "nullable": true
          }
        }
      },
      "VaultV2Transaction": {
        "type": "object",
        "required": [
          "timestamp",
          "amountAssetsTransferred",
          "amountSharesTransferred",
          "currentBalanceShares",
          "hash",
          "type"
        ],
        "properties": {
          "amountAssetsTransferred": {
            "type": "number",
            "format": "double",
            "description": "Amount of assets transferred",
            "example": 0.1
          },
          "amountSharesTransferred": {
            "type": "number",
            "format": "double",
            "description": "Amount of shares transferred",
            "example": 0.1
          },
          "currentBalanceShares": {
            "type": "number",
            "format": "double",
            "description": "Current balance in shares after this transaction",
            "example": 0.1
          },
          "hash": {
            "type": "string",
            "description": "Transaction hash",
            "example": "0x3b398e37cbf1b805c6bbd9d88b2337284dd72c2f29a899454974cbd5b38f13c9"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Transaction timestamp in milliseconds",
            "example": 1754129249000,
            "minimum": 0
          },
          "type": {
            "type": "string",
            "description": "Transaction type",
            "example": "deposit"
          }
        },
        "example": {
          "amountAssetsTransferred": 0.1,
          "amountSharesTransferred": 0.1,
          "currentBalanceShares": 0.1,
          "hash": "0x3b398e37cbf1b805c6bbd9d88b2337284dd72c2f29a899454974cbd5b38f13c9",
          "timestamp": 1754129249000,
          "type": "deposit"
        }
      },
      "VaultV2UserPositionsQueryParams": {
        "type": "object",
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by chain ID",
            "example": 1,
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Limit number of transactions per vault",
            "example": 100,
            "nullable": true
          }
        }
      },
      "VaultV2UserPositionsResponse": {
        "type": "object",
        "required": [
          "address",
          "vaults"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "User address",
            "example": "0xe5b709a14859edf820347d78e587b1634b0ec771"
          },
          "vaults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VaultV2VaultPosition"
            },
            "description": "List of vault positions for this user"
          }
        },
        "example": {
          "address": "0xe5b709a14859edf820347d78e587b1634b0ec771",
          "vaults": []
        }
      },
      "VaultV2VaultPosition": {
        "type": "object",
        "required": [
          "addressVault",
          "chain_id",
          "shares",
          "ratio",
          "lastUpdateTxHash",
          "lastUpdateTimestamp",
          "transactions"
        ],
        "properties": {
          "addressVault": {
            "type": "string",
            "description": "Vault address",
            "example": "0xbd9be389743674cd1eba663067eb83d294321a33"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "Chain ID",
            "example": 1
          },
          "lastUpdateTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of the last update in milliseconds",
            "example": 1754506387000,
            "minimum": 0
          },
          "lastUpdateTxHash": {
            "type": "string",
            "description": "Hash of the last update transaction",
            "example": "0xa5f7a2992c16ef0dc5fcb5824db2f1a8f18f68ae1fecd7ea07780681812c33e1"
          },
          "ratio": {
            "type": "number",
            "format": "double",
            "description": "Share to asset ratio (last share price)",
            "example": 1.00054002160086
          },
          "shares": {
            "type": "number",
            "format": "double",
            "description": "User's shares in this vault",
            "example": 249989
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VaultV2Transaction"
            },
            "description": "List of transactions for this vault"
          }
        },
        "example": {
          "addressVault": "0xbd9be389743674cd1eba663067eb83d294321a33",
          "lastUpdateTimestamp": 1754506387000,
          "lastUpdateTxHash": "0xa5f7a2992c16ef0dc5fcb5824db2f1a8f18f68ae1fecd7ea07780681812c33e1",
          "ratio": 1.00054002160086,
          "shares": 249989,
          "transactions": []
        }
      },
      "VaultV2Withdraw": {
        "type": "object",
        "required": [
          "assets",
          "block_number",
          "block_timestamp",
          "chain_id",
          "id",
          "log_index",
          "on_behalf",
          "receiver",
          "sender",
          "shares",
          "transaction_hash",
          "user_id",
          "vault_id"
        ],
        "properties": {
          "assets": {
            "type": "string",
            "description": "Amount of assets withdrawn",
            "example": "750.25"
          },
          "block_number": {
            "type": "string",
            "description": "Block number when withdrawal occurred",
            "example": "18500000"
          },
          "block_timestamp": {
            "type": "string",
            "description": "Block timestamp when withdrawal occurred",
            "example": "1672531200"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "Chain ID",
            "example": 1
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the withdrawal",
            "example": "withdraw_123"
          },
          "log_index": {
            "type": "integer",
            "format": "int32",
            "description": "Log index of the withdrawal event",
            "example": 15
          },
          "on_behalf": {
            "type": "string",
            "description": "Address on behalf of whom the withdrawal was made",
            "example": "0x1234567890abcdef"
          },
          "receiver": {
            "type": "string",
            "description": "Address that received the withdrawn assets",
            "example": "0xreceiver1234567890"
          },
          "sender": {
            "type": "string",
            "description": "Address of the withdrawal sender",
            "example": "0xabcdef1234567890"
          },
          "shares": {
            "type": "string",
            "description": "Amount of shares burned for the withdrawal",
            "example": "748.75"
          },
          "transaction_hash": {
            "type": "string",
            "description": "Transaction hash of the withdrawal",
            "example": "0x9876543210fedcba"
          },
          "user_id": {
            "type": "string",
            "description": "User ID associated with this withdrawal",
            "example": "user_456"
          },
          "vault_id": {
            "type": "string",
            "description": "Vault ID associated with this withdrawal",
            "example": "vault_789"
          }
        },
        "example": {
          "assets": "750.25",
          "block_number": "18500000",
          "block_timestamp": "1672531200",
          "chain_id": 1,
          "id": "withdraw_123",
          "log_index": 15,
          "on_behalf": "0x1234567890abcdef",
          "receiver": "0xreceiver1234567890",
          "sender": "0xabcdef1234567890",
          "shares": "748.75",
          "transaction_hash": "0x9876543210fedcba",
          "user_id": "user_456",
          "vault_id": "vault_789"
        }
      },
      "VaultV2WithdrawQueryParams": {
        "type": "object",
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by chain ID",
            "example": 1,
            "nullable": true
          },
          "from_block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Limit number of results",
            "example": 100,
            "nullable": true
          },
          "max_assets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "min_assets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "on_behalf": {
            "type": "string",
            "description": "Filter by on_behalf address",
            "example": "0x1234567890abcdef",
            "nullable": true
          },
          "receiver": {
            "type": "string",
            "description": "Filter by receiver address",
            "example": "0xreceiver1234567890",
            "nullable": true
          },
          "sender": {
            "type": "string",
            "description": "Filter by sender address",
            "example": "0xabcdef1234567890",
            "nullable": true
          },
          "to_block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BigDecimal"
              }
            ],
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "description": "Filter by user ID",
            "example": "user_456",
            "nullable": true
          },
          "vault_id": {
            "type": "string",
            "description": "Filter by vault ID",
            "example": "vault_789",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "integrator_and_user_auth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Pubkey, X-Timestamp, X-Signature, X-User-Stamp"
      },
      "integrator_auth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Pubkey, X-Timestamp, X-Signature"
      }
    }
  },
  "tags": [
    {
      "name": "User accounts",
      "description": "Endpoints to create or edit user accounts."
    },
    {
      "name": "Approve vault for deposit",
      "description": "Endpoints to approve a vault, allowing a user to deposit."
    },
    {
      "name": "Make deposit",
      "description": "Endpoints to make a deposit into a vault."
    },
    {
      "name": "Make withdrawal",
      "description": "Endpoints to make a withdrawal from a vault."
    },
    {
      "name": "Query user data",
      "description": "Get data about a user."
    },
    {
      "name": "Query vault data",
      "description": "Get data about vaults."
    },
    {
      "name": "Query API health",
      "description": "Check API status."
    }
  ]
}